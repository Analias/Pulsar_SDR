
//=======================================================
//  This code is template generated by
//  Terasic System Builder
//=======================================================


//=======================================================
//  This code implements a software defined radio based
//  on the DEO Nano board
//  
//  Copyright Lee Szuba 2012
//=======================================================


module SDR_REV_A(

		//////////// CLOCK //////////
		CLOCK_50,

		//////////// LED //////////
		LED,

		//////////// KEY //////////
		KEY,

		//////////// SW //////////
		SW,

		//////////// EPCS //////////
		EPCS_ASDO,
		EPCS_DATA0,
		EPCS_DCLK,
		EPCS_NCSO,

		//////////// 2x13 GPIO Header //////////
		GPIO_2,
		GPIO_2_IN,

		//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
		A,
		A_IN,

		//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
		B,
		B_IN 
	);

	//=======================================================
	//  PARAMETER declarations
	//=======================================================


	//=======================================================
	//  PORT declarations
	//=======================================================

	//////////// CLOCK //////////
	input 		          		CLOCK_50;

	//////////// LED //////////
	output		     [7:0]		LED;

	//////////// KEY //////////
	input 		     [1:0]		KEY;

	//////////// SW //////////
	input 		     [3:0]		SW;

	//////////// EPCS //////////
	output		          		EPCS_ASDO;
	input 		          		EPCS_DATA0;
	output		          		EPCS_DCLK;
	output		          		EPCS_NCSO;

	//////////// 2x13 GPIO Header //////////
	inout 		    [12:0]		GPIO_2;
	input 		     [2:0]		GPIO_2_IN;

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [33:0]		A;
	input 		     [1:0]		A_IN;

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [33:0]		B;
	input 		     [1:0]		B_IN;


	//=======================================================
	//  REG/WIRE declarations
	//=======================================================

	// Alias the 50 MHz system clock to a signal just in case
	// a PLL is later used to synthesize a faster clock rate
	wire clk = CLOCK_50;

	// Clock outputs
	wire [4:0] quad_out;
	wire pll_lock;

	// Heartbeat signal
	wire beat_out;

	//=======================================================
	//  Structural coding
	//=======================================================

	
	// Human interface
	// One button raises the clock frequency, the other
	// lowers it. To be used to tune the device
	// 256 discrete values to start, depending on the tuning
	// range, this may be increased
	reg [7:0] tuning;
	always @(posedge clk)
	
	

	// Module to take clock frequency and synthesize
	// quadrature outputs at adjustable frequency
	IF_SYNTH( clk, , quad_out, pll_lock );
	// Quadrature signal on GPIO-1, pins 37-40
	assign B [33:29] = quad_out;
	// LED 7 indicates the PLL has locked to it's target
	// frequency
	assign LED[7] = pll_lock;

	
	// Generate a simple heartbeat signal on one of the on-
	// board LEDs (LED 0) to indicate the fpga is active
	// Frequency < 1Hz
	HEARTBEAT( clk, beat_out );
	assign LED[0] = beat_out;

endmodule
